content to test git hub
https://github.com/enpodi
https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
https://stackoverflow.com/questions/12799719/how-to-upload-a-project-to-github
https://github.com/git-tips/tips
https://github.com/git-tips/tips#everyday-git-in-twenty-commands-or-so
https://labs.consol.de/development/git/2017/02/22/gitignore.html
https://git-scm.com/docs/gitignore
http://gitready.com/intermediate/2009/01/30/finding-what-has-been-changed.html

git status


git init
git add .
 git config --global user.email enpodi@yahoo.com.mx
 
 git remote add origin https://github.com/enpodi       XXXXXXXXX   FIRST A REPOSITORY HAS TO BE CREATED IN THE WEB PAGE
 
 git remote -v

 git push origin master
 
 
 login and create a repository. then
 git remote add origin https://github.com/enpodi/githubguide.git
 
 fatal: remote origin already exist
 
 TL;DR you should just update the existing remote:

$ git remote set-url origin git@github.com:ppreyer/first_app.git
git remote set-url origin https://github.com/enpodi/githubguide.git

 git push origin master
 
 git commit -m "first log graph works but simple"
 
 https://devhints.io/git-log-format
 https://devhints.io/git-log
 https://coderwall.com/p/euwpig/a-better-git-log
 
 http://michaelwales.com/articles/make-gitconfig-work-for-you/           XXXXXXXXXXXXXXXXXXX
https://git-scm.com/docs/pretty-formats                XXXXXXXXXXXXXXXXXXXXXXXXXx


https://stackoverflow.com/questions/9483757/how-to-exit-git-log-or-git-diff
git config --global core.pager cat

git show-ref master

#after commiting locally
git fetch
#there are 2 branches: master (local) and origin/master.
# so from our local head branch (master) we run:
git merge origin/master       #WE ARENOT REWRITING HISTORY. MERGES NEVER DO THAT. INSTEAD, THEY JUST ADD NEW OBJECTS.
#"git  push"   followed by    "git merge"   is reduced with:
git pull

git --no-pager log --oneline -n 10
--no-pager will encounter the (END) word
-n 10 will show only the last 10 commits
--oneline will show the commit message, ignore the author, date information
  
GRAPH

log --graph --pretty=format
  lg = log --oneline --abbrev-commit --all --graph --decorate --color
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

git lg
git lg1
 git lg2
 I have two aliases I normally throw in my ~/.gitconfig file:

[alias]
lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
lg = !"git lg1"
 
 
 
 
 Hey enpodi!

A personal access token (git: https://github.com/ on DESKTOP-FK4K811 at 18-jul-2018 21:18) with gist and repo scopes was recently added to your account. Visit https://github.com/settings/tokens for more information.

To see this and other security events for your account, visit https://github.com/settings/security

If you run into problems, please contact support by visiting https://github.com/contact

Thanks,
Your friends at GitHub